public class lesson_18_21 {
    //Множественное наследование

    //В Java все классы могут иметь только один класс-родитель.
    //В других языках программирования классы часто могут иметь несколько классов-родителей.
    //Это очень удобно, но приносит также много проблем.

    //В Java пришли к компромиссу: запретили множественное наследование классов, но разрешили множественное наследование интерфейсов.
    //Интерфейс может иметь несколько интерфейсов-родителей.
    //Класс может иметь несколько интерфейсов-родителей и только один класс-родитель.

    //Почему же множественное наследование классов запретили, а интерфейсов — разрешили?
    //Все дело в так называемом пирамидальном наследовании

    //Давайте рассмотрим такой простой пример. Допустим, у нас есть 3 класса:
}
class Data
{
    protected int value;
}

class XCoordinate extends Data
{
    public void setX (int x) { value = x;}
    public int getX () { return value;}
}

class YCoordinate extends Data
{
    public void setY (int y) { value = y;}
    public int getY () { return value;}
}

    //Класс Data хранит у себя переменную value.
    //Его класс-наследник XCoordinate использует ее для того, чтобы хранить в ней переменную x,
    //а класс-наследник YCoordinate использует ее для того, чтобы хранить в ней переменную y.
    //И это работает. По отдельности.
    //Но вот если мы захотим унаследовать класс XYCoordinates от обоих классов, XCoordinate и YCoordinate, получим неработающий код.
    //У этого класса будут методы его классов-предков, но работать они будут неправильно, т.к. переменная value у них одна.

    //А т.к. интерфейсам запрещено иметь переменные, то и конфликта такого рода у них быть не может.
    //Поэтому разрешено множественное наследование интерфейсов.



