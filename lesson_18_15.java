public class lesson_18_15 {
    //Абстрактные классы

    //Помните ситуацию, когда мы ввели базовый класс ChessItem для упрощения всех классов шахматных фигур?
    //Теперь представьте, что у каждой фигуры есть метод, который занимается ее отрисовкой на экране, например, draw().
    //Вызываешь метод draw(), и фигура сама себя рисует в своих текущих координатах. Удобно было бы вынести этот метод в базовый класс.
    //Если бы метод draw() был у базового класса ChessItem, можно было бы переопределить его в классах фигур и писать такой элегантный код:
    /*
    class ChessBoard
    {
        public void drawAllChessItems()
        {
            // добавляем фигуры в список
            ArrayList<ChessItem> items = new ArrayList<ChessItem>();
            items.add(new King());
            items.add(new Queen());
            items.add(new Bishop());

            // рисуем их независимо от типа
            for(ChessItem item: items)
            {
                item.draw();
            }
        }
    }
    */

    //Введение базового класса ChessItem помогает очень упростить код: не нужно вызывать методы каждого класса отдельно,
    //можно легко хранить все объекты в одной коллекции и т.п.
    //Зато есть один интересный вопрос: а что должен отрисовывать на экране метод draw(),
    //объявленный непосредственно в самом классе ChessItem? Ведь такой фигуры в шахматах нет, значит и рисовать нечего.

    //Именно. Более того, создавать объекты типа ChessItem не имеет смысла.
    //Это не фигура из шахмат, а всего лишь абстракция — класс, который мы сделали для удобства.

    //Так работает абстракция из ООП:
    //мы вынесли важные (общие для всех фигур) данные и методы в базовый класс, а их различия оставили в их классах.


    //Для такого случая в Java есть специальный тип классов — абстрактные классы. Они созданы для того,
    //чтобы программисты могли упростить работу с похожими классами и уменьшить количество похожего кода в них.
    //Вот три вещи, которые стоит знать об абстрактных классах.

    //Метод без реализации
    //Абстрактный класс может содержать объявление метода без его реализации. Такой метод называется абстрактным.
    //Вместо тела метода просто ставится точка с запятой. А перед названием метода пишется ключевое слово — abstract. Пример:
}

abstract class ChessItem
{
    public int x, y; // координаты
    private int value; // «ценность» фигуры
    public int getValue() // обычный метод, возвращает значение value
    {
        return value;
    }

    public abstract void draw(); // абстрактный метод. Реализация отсутствует.
}

//Абстрактный класс
//Каждый метод без реализации помечается специальным ключевым словом abstract.
//Если в классе есть хоть один абстрактный метод, класс тоже помечается ключевым словом abstract.


//Запрет на создание объектов
//Создавать объекты абстрактного класса нельзя. Такой код просто не скомпилируется.

//ChessItem item = new ChessItem();     Этот код не скомпилируется
//item.draw();

//ChessItem item = new Queen();         А так можно
//item.draw();


